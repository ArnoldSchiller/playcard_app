// lib/services/audio_handler.dart
import 'package:audio_service/audio_service.dart';
import 'package:playcard_app/services/adapter_interface.dart';
import 'package:playcard_app/services/audioplayers_adapter.dart';
import 'package:playcard_app/utils/app_startup.dart';

class AudioPlayerHandler extends BaseAudioHandler with QueueHandler, SeekHandler {
  AudioPlayerAdapter? _playerAdapter;
  PlaybackState _playbackState = PlaybackState();
  MediaItem? _currentMediaItem;

  AudioPlayerHandler() {
    // Plattform-spezifische Pr채ferenz
    bool preferAudioplayers = AppStartup.currentPlatform == SupportedPlatform.audio ||
        AppStartup.currentPlatform == SupportedPlatform.web;

    // Initialisiere den Adapter
    _initializeAdapter(preferAudioplayers);
  }

  Future<void> _initializeAdapter(bool preferAudioplayers) async {
    if (preferAudioplayers) {
      // Bevorzuge audioplayers f체r Linux und Web
      try {
        _playerAdapter = AudioplayersAdapter();
        print('Using AudioplayersAdapter (preferred for Linux/Web)');
      } catch (e) {
        print('audioplayers not available: $e');
        // Fallback auf just_audio, falls verf체gbar
        await _tryJustAudio();
      }
    } else {
      // Bevorzuge just_audio f체r Android/iOS
      await _tryJustAudio();
    }

    if (_playerAdapter == null) {
      // Setup listeners only if adapter is initialized
      _setupListeners();
    } else {
      throw UnsupportedError(
          'Neither just_audio nor audioplayers is available. Please add at least one to pubspec.yaml.');
    }
  }

  Future<void> _tryJustAudio() async {
    try {
      // Dynamischer Import von just_audio
      final justAudio = await import('package:just_audio/just_audio.dart');
      _playerAdapter = justAudio.JustAudioAdapter();
      if (AppStartup.currentPlatform == SupportedPlatform.linux) {
        print('Warning: Using just_audio on Linux may require libmpv-dev.');
      }
      print('Using JustAudioAdapter');
    } catch (e) {
      print('just_audio not available: $e');
      // Fallback auf audioplayers
      try {
        _playerAdapter = AudioplayersAdapter();
        print('Using AudioplayersAdapter (fallback)');
      } catch (e) {
        print('audioplayers not available: $e');
      }
    }
  }

  void _setupListeners() {
    // Listen to play state
    _playerAdapter!.playingStream.listen((playing) {
      _playbackState = _playbackState.copyWith(
        playing: playing,
        controls: [
          playing ? MediaControl.play : MediaControl.pause,
          MediaControl.stop,
        ],
        processingState: playing ? AudioProcessingState.ready : AudioProcessingState.idle,
      );
      playbackState.add(_playbackState);
    });

    // Listen to playback position
    _playerAdapter!.positionStream.listen((position) {
      _playbackState = _playbackState.copyWith(updatePosition: position);
      playbackState.add(_playbackState);
    });

    // Listen to duration
    _playerAdapter!.durationStream.listen((duration) {
      if (_currentMediaItem != null) {
        _currentMediaItem = _currentMediaItem!.copyWith(duration: duration);
        mediaItem.add(_currentMediaItem!);
      }
      _playbackState = _playbackState.copyWith(bufferedPosition: duration);
      playbackState.add(_playbackState);
    });
  }

  @override
  Future<void> play() async {
    if (_currentMediaItem != null) {
      await _playerAdapter!.play(_currentMediaItem!.id);
    }
  }

  @override
  Future<void> pause() async {
    await _playerAdapter!.pause();
  }

  @override
  Future<void> stop() async {
    await _playerAdapter!.stop();
    _currentMediaItem = null;
    mediaItem.add(null);
    _playbackState = _playbackState.copyWith(
      playing: false,
      processingState: AudioProcessingState.idle,
    );
    playbackState.add(_playbackState);
  }

  @override
  Future<void> seek(Duration position) async {
    await _playerAdapter!.seek(position);
  }

  Future<void> playMediaItem(MediaItem mediaItem) async {
    _currentMediaItem = mediaItem;
    this.mediaItem.add(mediaItem);
    await _playerAdapter!.play(mediaItem.id);
  }

  Stream<Duration> get positionStream => _playerAdapter!.positionStream;
  Stream<Duration> get durationStream => _playerAdapter!.durationStream;
  Stream<bool> get playingStream => _playerAdapter!.playingStream;
}
