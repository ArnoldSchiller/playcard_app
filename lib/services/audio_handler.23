// lib/services/audio_handler.dart
import 'package:audio_service/audio_service.dart';
import 'package:just_audio/just_audio.dart';
import 'package:audioplayers/audioplayers.dart';
import 'package:playcard_app/utils/app_startup.dart';

abstract class AudioHandlerBase implements AudioHandler {
  @override
  Future<void> playMediaItem(MediaItem mediaItem);
}

class _JustAudioHandler extends BaseAudioHandler implements AudioHandlerBase {
  final AudioPlayer _player = AudioPlayer();

  @override
  Future<void> playMediaItem(MediaItem mediaItem) async {
    print('Spiele mit just_audio ab: ${mediaItem.id}');
    await _player.setAudioSource(AudioSource.uri(Uri.parse(mediaItem.id)));
    await _player.play();
  }

  @override
  Future<void> play() async {
    await _player.play();
  }

  @override
  Future<void> pause() async {
    await _player.pause();
  }

  @override
  Future<void> stop() async {
    await _player.stop();
  }

  @override
  Future<void> seek(Duration position) async {
    await _player.seek(position);
  }
}

class _AudioPlayersHandler extends BaseAudioHandler implements AudioHandlerBase {
  final AudioPlayer _player = AudioPlayer();

  @override
  Future<void> playMediaItem(MediaItem mediaItem) async {
    print('Spiele mit audioplayers ab: ${mediaItem.id}');
    await _player.play(mediaItem.id);
  }

  @override
  Future<void> play() async {
    await _player.resume();
  }

  @override
  Future<void> pause() async {
    await _player.pause();
  }

  @override
  Future<void> stop() async {
    await _player.stop();
  }

  @override
  Future<void> seek(Duration position) async {
    await _player.seek(position);
  }
}

class AudioPlayerHandler extends BaseAudioHandler with SeekHandler {
  AudioHandlerBase? _delegate;

  AudioPlayerHandler() {
    _delegate = AppStartup.createPlatformHandler(
      android: () => _JustAudioHandler(),
      ios: () => _JustAudioHandler(),
      linux: () => _AudioPlayersHandler(),
      windows: () => _JustAudioHandler(),
      macos: () => _JustAudioHandler(),
      web: () => _AudioPlayersHandler(),
      defaultHandler: () => _JustAudioHandler(),
    );
    print('Verwende ${_delegate.runtimeType} f√ºr Plattform ${AppStartup.currentPlatform}');
  }

  @override
  Future<void> playMediaItem(MediaItem mediaItem) async {
    mediaItemStream.add(mediaItem);
    await _delegate?.playMediaItem(mediaItem);
  }

  @override
  Future<void> play() async {
    playbackState.add(playbackState.value.copyWith(playing: true));
    await _delegate?.play();
  }

  @override
  Future<void> pause() async {
    playbackState.add(playbackState.value.copyWith(playing: false));
    await _delegate?.pause();
  }

  @override
  Future<void> stop() async {
    playbackState.add(playbackState.value.copyWith(playing: false));
    await _delegate?.stop();
    mediaItemStream.add(null);
  }

  @override
  Future<void> seek(Duration position) async {
    playbackState.add(playbackState.value.copyWith(updatePosition: position));
    await _delegate?.seek(position);
  }
}
